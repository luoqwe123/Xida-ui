packages:
  - "packages/*"







# 一、定义工作空间范围
# pnpm-workspace.yaml文件通过指定目录或项目路径，明确哪些目录或项目属于当前的工作空间。例如，通过配置packages: - "packages/**"，可以表示packages目录下的所有子目录都被包含在工作空间中。

# 二、共享依赖管理
# 依赖共享：在pnpm工作空间中，可以指定某些依赖为所有项目共享的，从而避免每个项目都单独安装相同的依赖。这不仅可以节省磁盘空间，还能优化依赖管理。
# 依赖版本控制：通过集中管理依赖，pnpm-workspace.yaml有助于确保所有项目使用相同版本的依赖，从而避免版本冲突和兼容性问题。
# 三、明确项目依赖关系
# 在pnpm-workspace.yaml文件中，还可以配置项目之间的依赖关系。例如，通过配置packageDependencies和packageDependenciesMeta，可以明确指定某个项目依赖于其他项目，并设置依赖的可选性。

# 四、优化构建和开发流程
# 构建命令：在根目录下，可以使用pnpm run --filter <project-name> <command>命令对特定项目执行构建或其他脚本命令，从而简化构建流程。
# 实时链接：使用workspace:*协议可以在项目中实时链接其他子项目作为依赖。这意味着，在依赖项目中的任何改动都会立即反映到使用该依赖的项目中，从而提高开发效率。